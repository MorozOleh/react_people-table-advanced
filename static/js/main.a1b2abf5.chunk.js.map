{"version":3,"sources":["components/Header/Header.jsx","components/HomePage/HomePage.jsx","components/PersonRow/PersonRow.jsx","components/PeopleTable/PeopleTable.jsx","API/api.js","components/Form/Form.jsx","components/PeoplePage/PeoplePage.jsx","components/NotFoundPage/NotFoundPage.jsx","App.jsx","index.jsx"],"names":["Header","props","className","role","aria-label","activeClassName","exact","to","HomePage","PersonRow","people","match","useRouteMatch","person","find","human","slug","params","name","sex","born","died","motherName","fatherName","PeopleTable","searchParams","sortedBy","get","useState","sortedPeople","setSortedPeople","useEffect","sort","currentValue","nextValue","localeCompare","history","useHistory","search","useLocation","findPersonByName","personName","foundPerson","pathname","url","sortBy","type","set","push","toString","path","classNames","people__sort","onClick","map","key","man","woman","some","defaultProps","getPeople","a","axios","response","data","Error","Form","query","setQuery","applyQuery","useCallback","debounce","newQuary","delete","placeholder","value","onChange","event","target","PeoplePage","setPeople","location","URLSearchParams","visiblePeople","lowerQuery","toLowerCase","filter","includes","then","length","NotFoundPage","App","component","render","routerProps","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.a1b2abf5.chunk.js","sourcesContent":["import React from 'react';\nimport { NavLink } from 'react-router-dom';\n\nexport function Header(props) {\n  return (\n    <nav\n      className=\"navbar\"\n      role=\"navigation\"\n      aria-label=\"main navigation\"\n    >\n      <NavLink\n        className=\"navbar-item is-tab\"\n        activeClassName=\"is-active\"\n        exact\n        to=\"/\"\n      >\n        Home\n      </NavLink>\n      <NavLink\n        className=\"navbar-item is-tab\"\n        activeClassName=\"is-active\"\n        to=\"/people\"\n      >\n        People\n      </NavLink>\n    </nav>\n  );\n}\n","import React from 'react';\n\nexport function HomePage(props) {\n  return (\n    <h2 className=\"title\">Home page</h2>\n  );\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useRouteMatch } from 'react-router-dom';\n\nexport function PersonRow({\n  people,\n}) {\n  const match = useRouteMatch();\n  const person = people.find(human => human.slug === match.params.slug);\n\n  return (\n    <>\n      {person && (\n        <ul className=\"person__list\">\n          <li>\n            {\n              `Name: ${person.name}`\n            }\n          </li>\n          <li>\n            {\n              `Sex: ${person.sex === 'f' ? 'famale' : 'male'}`\n            }\n          </li>\n          <li>\n            {\n              `Born:: ${person.born}`\n            }\n          </li>\n          <li>\n            {\n              `Died: ${person.died}`\n            }\n          </li>\n          <li>\n            {\n              `Mother: ${person.motherName}`\n            }\n          </li>\n          <li>\n            {\n              `Father: ${person.fatherName}`\n            }\n          </li>\n        </ul>\n      )}\n    </>\n  );\n}\n\nPersonRow.propTypes = {\n  people: PropTypes.arrayOf(\n    PropTypes.shape({\n      born: PropTypes.number.isRequired,\n      died: PropTypes.number.isRequired,\n      sex: PropTypes.string.isRequired,\n      slug: PropTypes.string.isRequired,\n    }),\n  ).isRequired,\n};\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport 'bulma';\n\nimport {\n  useRouteMatch, useLocation, NavLink, Route, useHistory,\n} from 'react-router-dom';\nimport classNames from 'classnames';\nimport { PersonRow } from '../PersonRow';\n\nexport function PeopleTable({ people, slug, searchParams }) {\n  const sortedBy = searchParams.get('sortBy') || '';\n  const [sortedPeople, setSortedPeople] = useState(people);\n\n  useEffect(() => {\n    switch (sortedBy) {\n      case 'name':\n      case 'sex':\n        setSortedPeople([...sortedPeople.sort(\n          (currentValue, nextValue) => (\n            currentValue[sortedBy].localeCompare(nextValue[sortedBy])),\n        )]);\n        break;\n\n      case 'born':\n      case 'died':\n        setSortedPeople([...sortedPeople.sort(\n          (currentValue, nextValue) => (\n            currentValue[sortedBy] - nextValue[sortedBy]),\n        )]);\n        break;\n\n      default:\n        setSortedPeople(people);\n    }\n  }, [sortedBy, people]);\n\n  const match = useRouteMatch();\n  const history = useHistory();\n  const { search } = useLocation();\n\n  const findPersonByName = (personName) => {\n    const foundPerson = sortedPeople.find(({ name }) => name === personName);\n\n    if (foundPerson) {\n      return {\n        pathname: `${match.url}/${foundPerson.slug}`,\n        search,\n      };\n    }\n\n    return false;\n  };\n\n  const sortBy = (type) => {\n    searchParams.set('sortBy', type);\n    history.push(`?${searchParams.toString()}`);\n  };\n\n  return (\n    <>\n      <Route path={`${match.path}/:slug`}>\n        <PersonRow people={sortedPeople} />\n      </Route>\n      <table className=\"table is-fullwidth\">\n        <thead>\n          <tr>\n            <th\n              className={classNames({ people__sort: sortedBy === 'name' })}\n              onClick={() => sortBy('name')}\n            >\n              Name\n            </th>\n            <th\n              className={classNames({ people__sort: sortedBy === 'sex' })}\n              onClick={() => sortBy('sex')}\n            >\n              Sex\n            </th>\n            <th\n              className={classNames({ people__sort: sortedBy === 'born' })}\n              onClick={() => sortBy('born')}\n            >\n              Born\n            </th>\n            <th\n              className={classNames({ people__sort: sortedBy === 'died' })}\n              onClick={() => sortBy('died')}\n            >\n              Died\n            </th>\n            <th>Mother</th>\n            <th>Father</th>\n          </tr>\n        </thead>\n        <tbody>\n          {sortedPeople.map(person => (\n            <tr\n              key={person.slug}\n              className={slug === person.slug ? 'back' : ''}\n            >\n              <td>\n                <NavLink\n                  to={{\n                    pathname: `${match.url}/${person.slug}`,\n                    search,\n                  }}\n                  className={\n                    classNames(\n                      {\n                        man: person.sex === 'm',\n                        woman: person.sex === 'f',\n                      },\n                    )\n                  }\n                >\n                  {person.name}\n                </NavLink>\n              </td>\n              <td>{person.sex}</td>\n              <td>{person.born}</td>\n              <td>{person.died}</td>\n              <td\n                className={classNames(\n                  { woman: sortedPeople.some(\n                    ({ name }) => name === person.motherName,\n                  ) },\n                )}\n              >\n                {\n                  findPersonByName(person.motherName)\n                    ? (\n                      <NavLink\n                        to={findPersonByName(person.motherName)}\n                        className=\"woman\"\n                      >\n                        {person.motherName}\n                      </NavLink>\n                    )\n                    : person.motherName\n                }\n              </td>\n              <td\n                className={classNames(\n                  { woman: sortedPeople.some(\n                    ({ name }) => name === person.motherName,\n                  ) },\n                )}\n              >\n                {\n                  findPersonByName(person.fatherName)\n                    ? (\n                      <NavLink\n                        to={findPersonByName(person.fatherName)}\n                        className=\"man\"\n                      >\n                        {person.fatherName}\n                      </NavLink>\n                    )\n                    : person.fatherName\n                }\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </>\n  );\n}\n\nPeopleTable.propTypes = {\n  searchParams: PropTypes.shape({\n    get: PropTypes.func.isRequired,\n    set: PropTypes.func.isRequired,\n  }).isRequired,\n  slug: PropTypes.string,\n  people: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      sex: PropTypes.string.isRequired,\n      born: PropTypes.number.isRequired,\n      died: PropTypes.number.isRequired,\n      motherName: PropTypes.string,\n      fatherName: PropTypes.string,\n    }),\n  ).isRequired,\n};\n\nPeopleTable.defaultProps = {\n  slug: '',\n};\n","import axios from 'axios';\n\nconst BASE_URL\n  = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nexport const getPeople = async() => {\n  try {\n    const response = await axios.get(BASE_URL);\n    const { data } = response;\n\n    return data;\n  } catch (error) {\n    throw new Error(error);\n  }\n};\n","import React, { useState, useCallback } from 'react';\nimport { useHistory } from 'react-router-dom';\n\nimport PropTypes from 'prop-types';\nimport debounce from 'lodash/debounce';\n\nexport function Form({ searchParams }) {\n  const [query, setQuery] = useState(searchParams.get('query') || '');\n  const history = useHistory();\n  const applyQuery = useCallback(\n    debounce((newQuary) => {\n      if (newQuary) {\n        searchParams.delete('sortBy');\n        searchParams.set('query', newQuary);\n      } else {\n        searchParams.delete('query');\n      }\n\n      history.push(`?${searchParams.toString()}`);\n    }, 1000),\n    [],\n  );\n\n  const onChange = (event) => {\n    const { value } = event.target;\n\n    setQuery(value);\n    applyQuery(value);\n  };\n\n  return (\n    <form>\n      <div className=\"field\">\n        <div className=\"control\">\n          <label className=\"label\">\n            User Name\n            <input\n              className=\"input\"\n              type=\"text\"\n              placeholder=\"user name\"\n              value={query}\n              onChange={onChange}\n            />\n          </label>\n        </div>\n      </div>\n    </form>\n  );\n}\n\nForm.propTypes = {\n  searchParams: PropTypes.shape({\n    get: PropTypes.func.isRequired,\n    set: PropTypes.func.isRequired,\n    delete: PropTypes.func.isRequired,\n  }).isRequired,\n};\n","import React, { useState, useEffect } from 'react';\nimport { useRouteMatch, useLocation } from 'react-router-dom';\nimport { PeopleTable } from '../PeopleTable';\nimport { getPeople } from '../../API/api';\nimport { Form } from '../Form';\n\nexport function PeoplePage() {\n  const [people, setPeople] = useState([]);\n  const location = useLocation();\n  const match = useRouteMatch('/people/:slug?');\n  const { slug } = match.params;\n  const searchParams = new URLSearchParams(location.search);\n  const query = searchParams.get('query') || '';\n\n  let visiblePeople = people;\n\n  if (query) {\n    const lowerQuery = query.toLowerCase();\n\n    visiblePeople = people.filter(\n      ({ name }) => name.toLowerCase().includes(lowerQuery),\n    );\n  }\n\n  useEffect(() => {\n    getPeople()\n      .then(setPeople);\n  }, []);\n\n  return (\n    <>\n      <h2 className=\"title\">People page</h2>\n      <Form searchParams={searchParams} />\n\n      {people.length > 0 && (\n      <PeopleTable\n        people={visiblePeople}\n        slug={slug}\n        searchParams={searchParams}\n      />\n      )}\n    </>\n  );\n}\n","import React from 'react';\n\nexport function NotFoundPage(props) {\n  return (\n    <h2>Page not found</h2>\n  );\n}\n","import React from 'react';\nimport { Route, Switch, Redirect } from 'react-router-dom';\nimport { Header } from './components/Header';\nimport { HomePage } from './components/HomePage';\nimport { PeoplePage } from './components/PeoplePage';\nimport { NotFoundPage } from './components/NotFoundPage';\nimport './App.scss';\n\nexport const App = () => (\n  <>\n    <Header />\n    <div className=\"App\">\n      <Switch>\n        <Route path=\"/people\" component={PeoplePage} />\n\n        <Route\n          path=\"/\"\n          exact\n          render={routerProps => (\n            <HomePage {...routerProps} />\n          )}\n        />\n        <Route path=\"/notfound\" component={NotFoundPage} />\n        <Redirect path=\"/home\" to=\"/\" />\n        <Redirect path=\"/\" to=\"/notfound\" />\n      </Switch>\n    </div>\n  </>\n);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <HashRouter>\n    <App />\n  </HashRouter>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}