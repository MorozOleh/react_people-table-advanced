{"version":3,"sources":["components/Header/Header.jsx","components/HomePage/HomePage.jsx","components/PersonRow/PersonRow.jsx","components/PeopleTable/PeopleTable.jsx","API/api.js","components/Form/Form.jsx","components/PeoplePage/PeoplePage.jsx","components/NotFoundPage/NotFoundPage.jsx","App.jsx","index.jsx"],"names":["Header","className","role","aria-label","activeClassName","exact","to","HomePage","PersonRow","people","slug","useParams","person","find","human","name","sex","born","died","motherName","fatherName","PeopleTable","search","useLocation","searchParams","URLSearchParams","sortedBy","get","useState","sortedPeople","setSortedPeople","history","useHistory","useRouteMatch","url","useEffect","sort","currentValue","nextValue","localeCompare","findPersonByName","personName","foundPerson","pathname","sortBy","type","set","push","toString","path","classNames","is_selected","onClick","map","key","man","woman","some","getPeople","a","axios","response","data","console","warn","Form","query","setQuery","applyQuery","useCallback","debounce","newQuery","delete","placeholder","value","onChange","event","target","PeoplePage","setPeople","location","visiblePeople","lowerQuery","toLowerCase","filter","includes","then","length","NotFoundPage","App","component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c6711303.chunk.js","sourcesContent":["import React from 'react';\nimport { NavLink } from 'react-router-dom';\n\nexport function Header() {\n  return (\n    <nav\n      className=\"navbar\"\n      role=\"navigation\"\n      aria-label=\"main navigation\"\n    >\n      <NavLink\n        className=\"navbar-item is-tab\"\n        activeClassName=\"is-active\"\n        exact\n        to=\"/\"\n      >\n        Home\n      </NavLink>\n      <NavLink\n        className=\"navbar-item is-tab\"\n        activeClassName=\"is-active\"\n        to=\"/people\"\n      >\n        People\n      </NavLink>\n    </nav>\n  );\n}\n","import React from 'react';\n\nexport function HomePage() {\n  return (\n    <h2 className=\"title\">Home page</h2>\n  );\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useParams } from 'react-router-dom';\n\nexport function PersonRow({ people }) {\n  const { slug } = useParams();\n  const person = people.find(human => human.slug === slug);\n\n  return (\n    <>\n      {person && (\n        <ul className=\"person__list\">\n          <li>\n            {\n              `Name: ${person.name}`\n            }\n          </li>\n          <li>\n            {\n              `Sex: ${person.sex === 'f' ? 'female' : 'male'}`\n            }\n          </li>\n          <li>\n            {\n              `Born: ${person.born}`\n            }\n          </li>\n          <li>\n            {\n              `Died: ${person.died}`\n            }\n          </li>\n          <li>\n            {\n              `Mother: ${person.motherName}`\n            }\n          </li>\n          <li>\n            {\n              `Father: ${person.fatherName}`\n            }\n          </li>\n        </ul>\n      )}\n    </>\n  );\n}\n\nPersonRow.propTypes = {\n  people: PropTypes.arrayOf(\n    PropTypes.shape({\n      born: PropTypes.number.isRequired,\n      died: PropTypes.number.isRequired,\n      sex: PropTypes.string.isRequired,\n      slug: PropTypes.string.isRequired,\n    }),\n  ).isRequired,\n};\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport 'bulma';\n\nimport {\n  useRouteMatch,\n  useLocation,\n  NavLink,\n  Route,\n  useHistory,\n} from 'react-router-dom';\nimport classNames from 'classnames';\nimport { PersonRow } from '../PersonRow';\n\nexport function PeopleTable({ people }) {\n  const { search } = useLocation();\n  const searchParams = new URLSearchParams(search);\n  const sortedBy = searchParams.get('sortBy') || '';\n  const [sortedPeople, setSortedPeople] = useState(people);\n  const history = useHistory();\n  const { slug } = useRouteMatch('/people/:slug?');\n  const { url } = useRouteMatch();\n\n  useEffect(() => {\n    switch (sortedBy) {\n      case 'name':\n      case 'sex':\n        setSortedPeople([...sortedPeople.sort(\n          (currentValue, nextValue) => (\n            currentValue[sortedBy].localeCompare(nextValue[sortedBy])),\n        )]);\n        break;\n\n      case 'born':\n      case 'died':\n        setSortedPeople([...sortedPeople.sort(\n          (currentValue, nextValue) => (\n            currentValue[sortedBy] - nextValue[sortedBy]),\n        )]);\n        break;\n\n      default:\n        setSortedPeople(people);\n    }\n  }, [sortedBy, people]);\n\n  const findPersonByName = (personName) => {\n    const foundPerson = sortedPeople.find(({ name }) => name === personName);\n\n    if (foundPerson) {\n      return {\n        pathname: `${url}/${foundPerson.slug}`,\n        search,\n      };\n    }\n\n    return false;\n  };\n\n  const sortBy = (type) => {\n    searchParams.set('sortBy', type);\n    history.push(`?${searchParams.toString()}`);\n  };\n\n  return (\n    <>\n      <Route path={`${url}/:slug`}>\n        <PersonRow people={sortedPeople} />\n      </Route>\n      <table className=\"table is-fullwidth\">\n        <thead>\n          <tr>\n            <th\n              className={classNames({ is_selected: sortedBy === 'name' })}\n              onClick={() => sortBy('name')}\n            >\n              Name\n            </th>\n            <th\n              className={classNames({ is_selected: sortedBy === 'sex' })}\n              onClick={() => sortBy('sex')}\n            >\n              Sex\n            </th>\n            <th\n              className={classNames({ is_selected: sortedBy === 'born' })}\n              onClick={() => sortBy('born')}\n            >\n              Born\n            </th>\n            <th\n              className={classNames({ is_selected: sortedBy === 'died' })}\n              onClick={() => sortBy('died')}\n            >\n              Died\n            </th>\n            <th>Mother</th>\n            <th>Father</th>\n          </tr>\n        </thead>\n        <tbody>\n          {sortedPeople.map(person => (\n            <tr\n              key={person.slug}\n              className={slug === person.slug ? 'back' : ''}\n            >\n              <td>\n                <NavLink\n                  to={{\n                    pathname: `${url}/${person.slug}`,\n                    search,\n                  }}\n                  className={\n                    classNames(\n                      {\n                        man: person.sex === 'm',\n                        woman: person.sex === 'f',\n                      },\n                    )\n                  }\n                >\n                  {person.name}\n                </NavLink>\n              </td>\n              <td>{person.sex}</td>\n              <td>{person.born}</td>\n              <td>{person.died}</td>\n              <td\n                className={classNames(\n                  { woman: sortedPeople.some(\n                    ({ name }) => name === person.motherName,\n                  ) },\n                )}\n              >\n                {\n                  findPersonByName(person.motherName)\n                    ? (\n                      <NavLink\n                        to={findPersonByName(person.motherName)}\n                        className=\"woman\"\n                      >\n                        {person.motherName}\n                      </NavLink>\n                    )\n                    : person.motherName\n                }\n              </td>\n              <td\n                className={classNames(\n                  { woman: sortedPeople.some(\n                    ({ name }) => name === person.motherName,\n                  ) },\n                )}\n              >\n                {\n                  findPersonByName(person.fatherName)\n                    ? (\n                      <NavLink\n                        to={findPersonByName(person.fatherName)}\n                        className=\"man\"\n                      >\n                        {person.fatherName}\n                      </NavLink>\n                    )\n                    : person.fatherName\n                }\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </>\n  );\n}\n\nPeopleTable.propTypes = {\n  people: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      sex: PropTypes.string.isRequired,\n      born: PropTypes.number.isRequired,\n      died: PropTypes.number.isRequired,\n      motherName: PropTypes.string,\n      fatherName: PropTypes.string,\n    }),\n  ).isRequired,\n};\n","import axios from 'axios';\n\nconst BASE_URL\n  = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nexport const getPeople = async() => {\n  try {\n    const response = await axios.get(BASE_URL);\n    const { data } = response;\n\n    return data;\n  } catch (error) {\n    // eslint-disable-next-line no-console\n    console.warn(error);\n  }\n\n  return [];\n};\n","import React, { useState, useCallback } from 'react';\nimport { useHistory, useLocation } from 'react-router-dom';\n\nimport debounce from 'lodash/debounce';\n\nexport function Form() {\n  const history = useHistory();\n  const { search } = useLocation();\n  const searchParams = new URLSearchParams(search);\n  const [query, setQuery] = useState(searchParams.get('query') || '');\n\n  const applyQuery = useCallback(debounce((newQuery) => {\n    if (newQuery) {\n      searchParams.delete('sortBy');\n      searchParams.set('query', newQuery);\n    } else {\n      searchParams.delete('query');\n    }\n\n    history.push(`?${searchParams.toString()}`);\n  }, 1000), []);\n\n  const onChange = (event) => {\n    const { value } = event.target;\n\n    setQuery(value);\n    applyQuery(value);\n  };\n\n  return (\n    <form>\n      <div className=\"field\">\n        <div className=\"control\">\n          <label className=\"label\">\n            User Name\n            <input\n              className=\"input\"\n              type=\"text\"\n              placeholder=\"user name\"\n              value={query}\n              onChange={onChange}\n            />\n          </label>\n        </div>\n      </div>\n    </form>\n  );\n}\n","import React, { useState, useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { PeopleTable } from '../PeopleTable';\nimport { getPeople } from '../../API/api';\nimport { Form } from '../Form';\n\nexport function PeoplePage() {\n  const [people, setPeople] = useState([]);\n  const location = useLocation();\n  const searchParams = new URLSearchParams(location.search);\n  const query = searchParams.get('query') || '';\n\n  let visiblePeople = people;\n\n  if (query) {\n    const lowerQuery = query.toLowerCase();\n\n    visiblePeople = people.filter(\n      ({ name }) => name.toLowerCase().includes(lowerQuery),\n    );\n  }\n\n  useEffect(() => {\n    getPeople()\n      .then(setPeople);\n  }, []);\n\n  return (\n    <>\n      <h2 className=\"title\">People page</h2>\n      <Form />\n      {people.length > 0 && (\n        <PeopleTable\n          people={visiblePeople}\n        />\n      )}\n    </>\n  );\n}\n","import React from 'react';\n\nexport function NotFoundPage() {\n  return (\n    <h2>Page not found</h2>\n  );\n}\n","import React from 'react';\nimport { Route, Switch, Redirect } from 'react-router-dom';\nimport { Header } from './components/Header';\nimport { HomePage } from './components/HomePage';\nimport { PeoplePage } from './components/PeoplePage';\nimport { NotFoundPage } from './components/NotFoundPage';\nimport './App.scss';\n\nexport const App = () => (\n  <>\n    <Header />\n    <div className=\"App\">\n      <Switch>\n        <Route path=\"/\" exact component={HomePage} />\n        <Route path=\"/people\" component={PeoplePage} />\n        <Route path=\"/notfound\" component={NotFoundPage} />\n        <Redirect path=\"/home\" to=\"/\" />\n        <Redirect path=\"/\" to=\"/notfound\" />\n      </Switch>\n    </div>\n  </>\n);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <HashRouter>\n    <App />\n  </HashRouter>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}